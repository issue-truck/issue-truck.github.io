{"pageProps":{"post":{"title":"Angular v18  redirectTo 기능을 사용한 URL 리다이렉션 방법 ","description":"","date":"2024-07-01 20:38","slug":"2024-07-01-Angularv18FunctionalRedirectionusingredirectTo","content":"\n\n\n![image](/assets/img/2024-07-01-Angularv18FunctionalRedirectionusingredirectTo_0.png)\n\n앵귤러의 부활기 가운데, 신호, 신호 NgRx, Zoneless 및 기타 많은 새로운 기능에 대해 모두가 이야기하고 있는 것을 알 수 있습니다. 이러한 것들은 앵귤러 생태계를 활성화시킬 것이라고 약속하는 여러 흥미로운 업데이트 중 하나일 뿐입니다.\n\n하지만 이것들이 유일한 흥미로운 업데이트는 아닙니다. 앵귤러 v18에서는 여러 주목할만한 향상이 소개되었으며, 이 중 하나는 리다이렉션에 함수를 사용할 수 있는 능력인 'redirectTo'입니다. 이 기능은 개발자가 정적 문자열의 제약을 넘어서 더 복잡하고 동적인 리다이렉션 로직을 구현할 수 있도록 합니다.\n\n## 함수형 리다이렉션의 사용 시기 및 장소\n\n\n<div class=\"content-ad\"></div>\n\n새로운 기능이 도착했을 때 생길 수 있는 질문 중 하나는: 언제 그리고 어디에 사용해야 할까요?\n\n다음은 일부 예시입니다:\n\n- 역할 기반 리다이렉션: 사용자의 역할에 따라 응용 프로그램의 다른 부분으로 사용자를 리디렉션합니다. 예를 들어, 관리자는 대시보드로 보내지고, 일반 사용자는 홈페이지로 보내집니다.\n- 조건부 네비게이션: 구독 상태나 프로필 완성도와 같은 특정 조건에 따라 사용자를 리디렉션합니다.\n- 동적 경로: 사용자 데이터나 다른 응용 프로그램 상태를 기반으로 동적 경로를 만들어 사용자가 정확히 도착해야 하는 곳에 도착하도록 합니다.\n\n이러한 시나리오를 모두 다루는 예시를 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 사용 사례\n\n사용자가 일반 사용자 또는 관리자로 어떻게 로그인할지를 결정할 수 있는 사용자가 있다고 상상해보세요. 그들의 역할에 따라 적절한 페이지로 리디렉션하고 싶습니다.\n\n우선 아주 간단한 AuthService로 시작하여 사용자 객체를 포함하는 신호가 포함된 것을 작성할 것입니다. 간이로 이 객체는 프론트엔드 자체에서 placeholder로 대체됩니다. 실제 시나리오에서는 외부 서비스에서 가져올 수 있습니다.\n\n```js\n// auth.service.ts\nimport { Injectable, inject, signal } from '@angular/core';\nimport { Router } from '@angular/router';\n\nexport const Roles = {\n  User: 'user',\n  Admin: 'admin',\n} as const;\n\nexport type RolesType = (typeof Roles)[keyof typeof Roles];\n\ntype User = {\n  isAdmin: boolean;\n  name: string;\n  surname: string;\n  username: string;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  user = signal<User | null>(null);\n\n  #router = inject(Router);\n\n  get role(): RolesType {\n    return this.user()?.isAdmin ? Roles.Admin : Roles.User;\n  }\n\n  get username(): string {\n    return this.user()?.username || '';\n  }\n\n  isAuth(): boolean {\n    return !!this.user();\n  }\n\n  isAuthGuard(): boolean {\n    const isAuth = this.isAuth();\n\n    if (isAuth) return true;\n\n    this.#router.navigate(['login']);\n    return false;\n  }\n\n  authAdmin() {\n    this.user.set({\n      isAdmin: true,\n      name: 'Giorgio',\n      surname: 'Galassi',\n      username: 'ggadmin',\n    });\n  }\n\n  authUser() {\n    this.user.set({\n      isAdmin: false,\n      name: 'Giorgio',\n      surname: 'Galassi',\n      username: 'gguser',\n    });\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 우리 서비스가 준비되었으니 routes.ts 내에서 라우트 리다이렉션을 사용자 정의하고 관리하는 방법을 살펴보겠습니다.\n\n```js\n// routes.ts\nimport { inject } from '@angular/core';\nimport { Routes } from '@angular/router';\n\nimport { AuthService, Roles, RolesType } from './providers/auth.service';\n\nimport { UserComponent } from './pages/user.component';\nimport { AdminComponent } from './pages/admin.component';\nimport { LoginComponent } from './pages/login.component';\n\nconst Routes = {\n  User: 'user',\n  Admin: 'admin',\n  Login: 'login',\n} as const;\n\nexport type RoutesType = (typeof Routes)[keyof typeof Routes];\n\nconst routesMap = new Map<RolesType, RoutesType>([\n  [Roles.Admin, Routes.Admin],\n  [Roles.User, Routes.User],\n]);\n\nexport const routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: () => {\n      const auth = inject(AuthService);\n      const { role } = auth;\n\n      if (!auth.isAuth()) return Routes.Login;\n      return routesMap.get(role) || Routes.User;\n    },\n  },\n  {\n    path: Routes.Login,\n    component: LoginComponent,\n  },\n  {\n    path: Routes.User,\n    component: UserComponent,\n    canActivate: [() => inject(AuthService).isAuthGuard()],\n  },\n  {\n    path: Routes.Admin,\n    component: AdminComponent,\n    canActivate: [() => inject(AuthService).isAuthGuard()],\n  },\n];\n```\n\n로그인되어 있는 사용자를 리디렉션할 위치를 선택하기 위해 AuthService를 인젝트하고 사용하는 redirectTo 함수에 초점을 맞추세요.\n\n사용자가 로그인되어 있지 않을 경우 로그인 페이지로 리디렉션하는 방법을 주목해 보세요. 또 하나 중요한 점은 일반 문자열이 아니라 특정 로직에서 검색한 문자열을 반환한다는 점입니다.\n\n<div class=\"content-ad\"></div>\n\n이상으로 마치겠습니다!\n\n이 간단한 기사에서는 redirectTo 함수가 얼마나 유용하며 무엇을 할 수 있는지 살펴보았습니다.\n\n이것의 확장은 무한할 수 있습니다.\n\n여러분은 내부 상태를 활용하거나 서로 다른 서비스를 결합할 수도 있습니다. 좋은 실천이 한계입니다.\n\n<div class=\"content-ad\"></div>\n\n아래에서 함께 놀 수 있는 StackBlitz가 있어요.\n\n지금까지 함께해줘서 고마워요. 모든 것이 지금까지 명확했기를 바래요. \n더 많은 글을 더 즐겁게 살펴볼 수 있다면 저는 기쁠 거예요.\n\n다음 글에서 봐요,\nG.","ogImage":{"url":"/assets/img/2024-07-01-Angularv18FunctionalRedirectionusingredirectTo_0.png"},"coverImage":"/assets/img/2024-07-01-Angularv18FunctionalRedirectionusingredirectTo_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-07-01-Angularv18FunctionalRedirectionusingredirectTo_0.png\" alt=\"image\"></p>\n<p>앵귤러의 부활기 가운데, 신호, 신호 NgRx, Zoneless 및 기타 많은 새로운 기능에 대해 모두가 이야기하고 있는 것을 알 수 있습니다. 이러한 것들은 앵귤러 생태계를 활성화시킬 것이라고 약속하는 여러 흥미로운 업데이트 중 하나일 뿐입니다.</p>\n<p>하지만 이것들이 유일한 흥미로운 업데이트는 아닙니다. 앵귤러 v18에서는 여러 주목할만한 향상이 소개되었으며, 이 중 하나는 리다이렉션에 함수를 사용할 수 있는 능력인 'redirectTo'입니다. 이 기능은 개발자가 정적 문자열의 제약을 넘어서 더 복잡하고 동적인 리다이렉션 로직을 구현할 수 있도록 합니다.</p>\n<h2>함수형 리다이렉션의 사용 시기 및 장소</h2>\n<div class=\"content-ad\"></div>\n<p>새로운 기능이 도착했을 때 생길 수 있는 질문 중 하나는: 언제 그리고 어디에 사용해야 할까요?</p>\n<p>다음은 일부 예시입니다:</p>\n<ul>\n<li>역할 기반 리다이렉션: 사용자의 역할에 따라 응용 프로그램의 다른 부분으로 사용자를 리디렉션합니다. 예를 들어, 관리자는 대시보드로 보내지고, 일반 사용자는 홈페이지로 보내집니다.</li>\n<li>조건부 네비게이션: 구독 상태나 프로필 완성도와 같은 특정 조건에 따라 사용자를 리디렉션합니다.</li>\n<li>동적 경로: 사용자 데이터나 다른 응용 프로그램 상태를 기반으로 동적 경로를 만들어 사용자가 정확히 도착해야 하는 곳에 도착하도록 합니다.</li>\n</ul>\n<p>이러한 시나리오를 모두 다루는 예시를 살펴보겠습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>사용 사례</h2>\n<p>사용자가 일반 사용자 또는 관리자로 어떻게 로그인할지를 결정할 수 있는 사용자가 있다고 상상해보세요. 그들의 역할에 따라 적절한 페이지로 리디렉션하고 싶습니다.</p>\n<p>우선 아주 간단한 AuthService로 시작하여 사용자 객체를 포함하는 신호가 포함된 것을 작성할 것입니다. 간이로 이 객체는 프론트엔드 자체에서 placeholder로 대체됩니다. 실제 시나리오에서는 외부 서비스에서 가져올 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// auth.service.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, inject, signal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Router</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Roles</span> = {\n  <span class=\"hljs-title class_\">User</span>: <span class=\"hljs-string\">'user'</span>,\n  <span class=\"hljs-title class_\">Admin</span>: <span class=\"hljs-string\">'admin'</span>,\n} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n\n<span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">RolesType</span> = (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Roles</span>)[keyof <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Roles</span>];\n\ntype <span class=\"hljs-title class_\">User</span> = {\n  <span class=\"hljs-attr\">isAdmin</span>: boolean;\n  <span class=\"hljs-attr\">name</span>: string;\n  <span class=\"hljs-attr\">surname</span>: string;\n  <span class=\"hljs-attr\">username</span>: string;\n};\n\n@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthService</span> {\n  user = signal&#x3C;<span class=\"hljs-title class_\">User</span> | <span class=\"hljs-literal\">null</span>>(<span class=\"hljs-literal\">null</span>);\n\n  #router = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">Router</span>);\n\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">role</span>(): <span class=\"hljs-title class_\">RolesType</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">user</span>()?.<span class=\"hljs-property\">isAdmin</span> ? <span class=\"hljs-title class_\">Roles</span>.<span class=\"hljs-property\">Admin</span> : <span class=\"hljs-title class_\">Roles</span>.<span class=\"hljs-property\">User</span>;\n  }\n\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">username</span>(): string {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">user</span>()?.<span class=\"hljs-property\">username</span> || <span class=\"hljs-string\">''</span>;\n  }\n\n  <span class=\"hljs-title function_\">isAuth</span>(): boolean {\n    <span class=\"hljs-keyword\">return</span> !!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">user</span>();\n  }\n\n  <span class=\"hljs-title function_\">isAuthGuard</span>(): boolean {\n    <span class=\"hljs-keyword\">const</span> isAuth = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isAuth</span>();\n\n    <span class=\"hljs-keyword\">if</span> (isAuth) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-variable language_\">this</span>.#router.<span class=\"hljs-title function_\">navigate</span>([<span class=\"hljs-string\">'login'</span>]);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-title function_\">authAdmin</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span>.<span class=\"hljs-title function_\">set</span>({\n      <span class=\"hljs-attr\">isAdmin</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Giorgio'</span>,\n      <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">'Galassi'</span>,\n      <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'ggadmin'</span>,\n    });\n  }\n\n  <span class=\"hljs-title function_\">authUser</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span>.<span class=\"hljs-title function_\">set</span>({\n      <span class=\"hljs-attr\">isAdmin</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Giorgio'</span>,\n      <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">'Galassi'</span>,\n      <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'gguser'</span>,\n    });\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 우리 서비스가 준비되었으니 routes.ts 내에서 라우트 리다이렉션을 사용자 정의하고 관리하는 방법을 살펴보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// routes.ts</span>\n<span class=\"hljs-keyword\">import</span> { inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Routes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/router'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AuthService</span>, <span class=\"hljs-title class_\">Roles</span>, <span class=\"hljs-title class_\">RolesType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./providers/auth.service'</span>;\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">UserComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./pages/user.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AdminComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./pages/admin.component'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LoginComponent</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./pages/login.component'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Routes</span> = {\n  <span class=\"hljs-title class_\">User</span>: <span class=\"hljs-string\">'user'</span>,\n  <span class=\"hljs-title class_\">Admin</span>: <span class=\"hljs-string\">'admin'</span>,\n  <span class=\"hljs-title class_\">Login</span>: <span class=\"hljs-string\">'login'</span>,\n} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n\n<span class=\"hljs-keyword\">export</span> type <span class=\"hljs-title class_\">RoutesType</span> = (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Routes</span>)[keyof <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Routes</span>];\n\n<span class=\"hljs-keyword\">const</span> routesMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">RolesType</span>, <span class=\"hljs-title class_\">RoutesType</span>>([\n  [<span class=\"hljs-title class_\">Roles</span>.<span class=\"hljs-property\">Admin</span>, <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">Admin</span>],\n  [<span class=\"hljs-title class_\">Roles</span>.<span class=\"hljs-property\">User</span>, <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">User</span>],\n]);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">routes</span>: <span class=\"hljs-title class_\">Routes</span> = [\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">pathMatch</span>: <span class=\"hljs-string\">'full'</span>,\n    <span class=\"hljs-attr\">redirectTo</span>: <span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">const</span> auth = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AuthService</span>);\n      <span class=\"hljs-keyword\">const</span> { role } = auth;\n\n      <span class=\"hljs-keyword\">if</span> (!auth.<span class=\"hljs-title function_\">isAuth</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">Login</span>;\n      <span class=\"hljs-keyword\">return</span> routesMap.<span class=\"hljs-title function_\">get</span>(role) || <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">User</span>;\n    },\n  },\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">Login</span>,\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">LoginComponent</span>,\n  },\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">User</span>,\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">UserComponent</span>,\n    <span class=\"hljs-attr\">canActivate</span>: [<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AuthService</span>).<span class=\"hljs-title function_\">isAuthGuard</span>()],\n  },\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-title class_\">Routes</span>.<span class=\"hljs-property\">Admin</span>,\n    <span class=\"hljs-attr\">component</span>: <span class=\"hljs-title class_\">AdminComponent</span>,\n    <span class=\"hljs-attr\">canActivate</span>: [<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-title class_\">AuthService</span>).<span class=\"hljs-title function_\">isAuthGuard</span>()],\n  },\n];\n</code></pre>\n<p>로그인되어 있는 사용자를 리디렉션할 위치를 선택하기 위해 AuthService를 인젝트하고 사용하는 redirectTo 함수에 초점을 맞추세요.</p>\n<p>사용자가 로그인되어 있지 않을 경우 로그인 페이지로 리디렉션하는 방법을 주목해 보세요. 또 하나 중요한 점은 일반 문자열이 아니라 특정 로직에서 검색한 문자열을 반환한다는 점입니다.</p>\n<div class=\"content-ad\"></div>\n<p>이상으로 마치겠습니다!</p>\n<p>이 간단한 기사에서는 redirectTo 함수가 얼마나 유용하며 무엇을 할 수 있는지 살펴보았습니다.</p>\n<p>이것의 확장은 무한할 수 있습니다.</p>\n<p>여러분은 내부 상태를 활용하거나 서로 다른 서비스를 결합할 수도 있습니다. 좋은 실천이 한계입니다.</p>\n<div class=\"content-ad\"></div>\n<p>아래에서 함께 놀 수 있는 StackBlitz가 있어요.</p>\n<p>지금까지 함께해줘서 고마워요. 모든 것이 지금까지 명확했기를 바래요.\n더 많은 글을 더 즐겁게 살펴볼 수 있다면 저는 기쁠 거예요.</p>\n<p>다음 글에서 봐요,\nG.</p>\n</body>\n</html>\n"},"__N_SSG":true}